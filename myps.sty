\NeedsTeXFormat{LaTeX2e}[1999/01/01]
\ProvidesPackage{myps}[2011/04/29]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Declare package options %%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% In case of unknown options
\DeclareOption*{%
	\PackageWarning{myps}{Unknown option `\CurrentOption'}%
}

\ProcessOptions

%% Options to pass to packages

%% Packages to call
\RequirePackage{xifthen}
\RequirePackage{xkeyval}
% To know if the compilation is 'draft'
\RequirePackage{ifdraft}
% Make some calculations on floats
\RequirePackage{fltpoint}
% General PSTricks
\RequirePackage{pst-all}
% Some additional commands for basic PSTricks
\RequirePackage{pstricks-add}
% To introduce 'blur' effect on figures
\RequirePackage{pst-blur}
% For histogram and more complex graphics
\RequirePackage{pst-bar}
% For geometrical figures
\RequirePackage{pst-eucl}
% Try to make 3D figures
\RequirePackage{pst-3dplot}

%%%%%%%%%%%%%%%%%%%%%%%
%% New configuration %%
%%%%%%%%%%%%%%%%%%%%%%%
% The '.' will be the separator for decimal in floats
\fpDecimalSign{.}%
\newlength{\myps@whiskerwidth}
\newlength{\myps@medianwidth}
% For use in '\myaxes'
\newlength{\my@ps@xoffset}
\newlength{\my@ps@yoffset}
% Create default style for graphics (limited to 4 styles)
\newpsbarstyle{first-barstyle}{framearc=0.25,fillstyle=solid,fillcolor=mylightestblue,linestyle=none,linewidth=0.0pt}
\newpsbarstyle{second-barstyle}{framearc=0.25,fillstyle=solid,fillcolor=mylightblue,linestyle=none,linewidth=0.0pt}
\newpsbarstyle{third-barstyle}{framearc=0.25,fillstyle=solid,fillcolor=myblue,linestyle=none,linewidth=0.0pt}
\newpsbarstyle{fourth-barstyle}{framearc=0.25,fillstyle=solid,fillcolor=mydarkblue,linestyle=none,linewidth=0.0pt}
\psset{barstyle={first-barstyle,second-barstyle,third-barstyle,fourth-barstyle}}

%%%%%%%%%%%%%%%%%%
%% New commands %%
%%%%%%%%%%%%%%%%%%
% To define the width of whiskers lines for boxplot
\define@key[psset]{pst-bar}{pswhiskerwidth}[0.5pt]{\setlength\myps@whiskerwidth{#1}}
\setkeys[psset]{pst-bar}{pswhiskerwidth=0.5pt}
% To define the width of median line for boxplot
\define@key[psset]{pst-bar}{psmedianwidth}[1pt]{\setlength\myps@medianwidth{#1}}
\setkeys[psset]{pst-bar}{psmedianwidth=1pt}
% Define a master command for 'pspicture'
% This command introduce a border frame for draft compilation
\def\myps(#1,#2)(#3,#4){%
	\pspicture(#1,#2)(#3,#4)%
	\ifdraft%
	{%
		\psframe(#1,#2)(#3,#4)% To delimit the border of figure
	}{%
	}%
}
\def\endmyps{\endpspicture}

% Create an additionnal 'chartstyle'
% cluster, stack, block, boxplot
\def\psset@@chartstyle#1#2\@nil#3{%
	\def\my@ps@chartstyle{#1#2}%
	\ifthenelse{\equal{\my@ps@chartstyle}{cluster}}%
		{\let#3\z@}%
		{%
			\ifthenelse{\equal{\my@ps@chartstyle}{stack}}%
				{\let#3\@one}%
				{%
					\ifthenelse{\equal{\my@ps@chartstyle}{block}}%
						{\let#3\tw@}%
						{%
							\ifthenelse{\equal{\my@ps@chartstyle}{boxplot}}%
								{\let#3\thr@@}%
								{\@pstrickserr{Bad argument: `#1#2'}\@ehpa}%
						}%
				}%
		}%
}%

% Redefine the bar chart to have boxplot
\def\psbarchart@ii#1{%
	\begin@SpecialObj%

		% Save contents of \pst@code and load start-of-path code
		% into \pst@tempc
		\let\pst@tempb\pst@code%
		\def\pst@code{}%
		\solid@star%
		\let\pst@tempc\pst@code%

		% Load end-of-path code into \pst@tempd and restore original
		% contents of \pst@code
		\begin@barstyle%
		\expandafter\@setbarstyle\@barstylelist,\@nil\ignorespaces%
		\end@barstyle%
		\let\pst@code\pst@tempb%

		% Draw bar chart
		\pst@checknum\psk@barcolsep\pst@tempa%
		\pst@checknum\psk@barsep\pst@tempb%
		\ifx\psk@orientation\z@             % vertical
			\pst@dima=\psxunit%
			\pst@dimb=\psyunit%
			\def\pst@tempc{true}%
		\else\ifx\psk@orientation\p@        % horizontal
			\pst@dima=\psyunit%
			\pst@dimb=\psxunit%
			\def\pst@tempc{false}%
		\else
			\@pstrickserr{Bad orientation specification}\@ehpa
		\fi\fi
		\ifcase\psk@chartstyle% chartstyle=cluster
			\addto@pscode{%
				\pst@tempd%
				/BARDATA #1 def
				/nbars BARDATA length def
				/ncols BARDATA 0 get length def
				/colwidth \pst@number\pst@dima def
				/barcolsep \pst@tempa \pst@number\pst@dima mul def
				/barsep \pst@tempb \pst@number\pst@dima mul def
				/barwidth colwidth barcolsep sub nbars 1 sub barsep mul sub nbars div def
				/bXoffset 0.5 barcolsep mul def
				/colcount \pst@tempc\space {0}{ncols 1 sub} ifelse def
				/barcount 0 def
				/ybar1 0 def
				BARDATA {
					/DATAVECTOR exch def
					DATAVECTOR {
						/ybar2 exch \psbar@psop \psbar@mul mul \pst@number\pst@dimb mul def
						/xoffset barwidth barsep add barcount mul bXoffset add def
						/xbar1 colcount colwidth mul xoffset add def
						/xbar2 xbar1 barwidth add def
						ybar1 ybar2 ne {  % if ybar1 == ybar2, don't stroke a path
							newpath
							barstyles barcount get cvx exec
						} if
						/colcount \pst@tempc\space {colcount 1 add}{colcount 1 sub} ifelse def
					} forall
					/colcount \pst@tempc\space {0}{ncols 1 sub} ifelse def
					/barcount barcount 1 add def
				} forall
			}%
		\or%  chartstyle=stack
			\addto@pscode{%
				\pst@tempd%
				tx@BarDict begin
				/BARDATA #1 transpose def
				/ncols BARDATA length def
				/colwidth \pst@number\pst@dima def
				/barcolsep \pst@tempa \pst@number\pst@dima mul def
				/barwidth colwidth barcolsep sub def
				/bXoffset 0.5 barcolsep mul def
				/colcount \pst@tempc\space {0}{ncols 1 sub} ifelse def
				/barcount 0 def
				/ybar1 0 def
				BARDATA {
					/DATAVECTOR exch def
					/xbar1 colcount colwidth mul bXoffset add def
					/xbar2 xbar1 barwidth add def
					/count 0 def
					DATAVECTOR {
						count 0 eq {
							/ybar2 exch \psbar@psop \psbar@mul mul \pst@number\pst@dimb mul ybar1 add def
						}{
							/ybar2 exch \psbar@mul mul \pst@number\pst@dimb mul ybar1 add def
						} ifelse
						ybar1 ybar2 ne {  % if ybar1 == ybar2, don't stroke a path
							newpath
							barstyles barcount get cvx exec
							closepath
						} if
						/ybar1 ybar2 def
						/barcount barcount 1 add def
						/count count 1 add def
					} forall
					/barcount 0 def
					/ybar1 0 def
					/colcount \pst@tempc\space {colcount 1 add}{colcount 1 sub} ifelse def
				} forall
				end
			}%
		\or% chartstyle=block
			\addto@pscode{%
				\pst@tempd%
				tx@BarDict begin
				/BARDATA #1 transpose def
				/ncols BARDATA length def
				/nbars BARDATA 0 get length 2 idiv def
				/colwidth \pst@number\pst@dima def
				/barcolsep \pst@tempa \pst@number\pst@dima mul def
				/barsep \pst@tempb \pst@number\pst@dima mul def
				/barwidth colwidth barcolsep sub nbars 1 sub barsep mul sub nbars div def
				/bXoffset 0.5 barcolsep mul def
				/colcount \pst@tempc\space {0}{ncols 1 sub} ifelse def
				/barcount 0 def
				/ybar1 0 def
				BARDATA {
					/DATAVECTOR exch def
					0 1 nbars 1 sub {
						dup
						/ybar1 exch 2 mul DATAVECTOR exch get \psbar@psop \psbar@mul mul \pst@number\pst@dimb mul def
						/ybar2 exch 2 mul 1 add DATAVECTOR exch get \psbar@psop \psbar@mul mul \pst@number\pst@dimb mul def
						/xoffset barwidth barsep add barcount mul bXoffset add def
						/xbar1 colcount colwidth mul xoffset add def
						/xbar2 xbar1 barwidth add def
						ybar1 ybar2 ne {  % if ybar1 == ybar2, don't stroke a path
							newpath
							barstyles barcount get cvx exec
						} if
						/barcount barcount 1 add def
					} for
					/barcount 0 def
					/colcount \pst@tempc\space {colcount 1 add}{colcount 1 sub} ifelse def
				} forall
				end
			}%
		\or% chartstyle=plotbox
			\addto@pscode{%
				\pst@tempd%
				tx@BarDict begin
				/BARDATA #1 transpose def
				/ncols BARDATA length def
				/nbars BARDATA 0 get length 5 idiv def
				/colwidth \pst@number\pst@dima def
				/barcolsep \pst@tempa \pst@number\pst@dima mul def
				/barsep \pst@tempb \pst@number\pst@dima mul def
				/barwidth colwidth barcolsep sub nbars 1 sub barsep mul sub nbars div def
				/bXoffset 0.5 barcolsep mul def
				/colcount \pst@tempc\space {0}{ncols 1 sub} ifelse def
				/barcount 0 def
				/ybar1 0 def
				BARDATA {
					/DATAVECTOR exch def
					0 1 nbars 1 sub {
						dup
						dup
						dup
						dup
						/fdecile exch 5 mul DATAVECTOR exch get \psbar@psop \psbar@mul mul \pst@number\pst@dimb mul def
						/fquartile exch 5 mul 1 add DATAVECTOR exch get \psbar@psop \psbar@mul mul \pst@number\pst@dimb mul def
						/mediane exch 5 mul 2 add DATAVECTOR exch get \psbar@psop \psbar@mul mul \pst@number\pst@dimb mul def
						/lquartile exch 5 mul 3 add DATAVECTOR exch get \psbar@psop \psbar@mul mul \pst@number\pst@dimb mul def
						/ldecile exch 5 mul 4 add DATAVECTOR exch get \psbar@psop \psbar@mul mul \pst@number\pst@dimb mul def
						/xoffset barwidth barsep add barcount mul bXoffset add def
						/xoffset1 colcount colwidth mul xoffset add def
						/xoffset2 xoffset1 barwidth add def
						/xcenter xoffset1 xoffset2 add 2 div def
						/xmidoffset1 xcenter xoffset1 sub 2 div xoffset1 add def
						/xmidoffset2 xoffset2 xcenter sub 2 div xcenter add def
						\pst@number{\myps@whiskerwidth} setlinewidth
						newpath
						xmidoffset1 fdecile moveto
						xmidoffset2 fdecile lineto
						stroke
						newpath
						xmidoffset1 ldecile moveto
						xmidoffset2 ldecile lineto
						stroke
						fdecile fquartile ne {  % if fdecile == fquartile, don't stroke a path
							newpath
							xcenter fdecile moveto
							xcenter fquartile lineto
							stroke
						} if
						ldecile lquartile ne {  % if ldecile == lquartile, don't stroke a path
							newpath
							xcenter ldecile moveto
							xcenter lquartile lineto
							stroke
						} if
						/xbar1 xoffset1 def
						/xbar2 xoffset2 def
						/ybar1 fquartile def
						/ybar2 lquartile def
						ybar1 ybar2 ne {  % if ybar1 == ybar2, don't stroke a path
							newpath
							barstyles barcount get cvx exec
						} if
						\pst@number{\myps@medianwidth} setlinewidth
						newpath
						xoffset1 mediane moveto
						xoffset2 mediane lineto
						stroke
						/barcount barcount 1 add def
					} for
					/barcount 0 def
					/colcount \pst@tempc\space {colcount 1 add}{colcount 1 sub} ifelse def
				} forall
				end
			}%
		\else%
			\@pstrickserr{Unknown chart style.}\@ehpa%
		\fi%
		\ifx\psk@orientation\z@%
			\pstbar@xlabels%
		\else
			\pstbar@ylabels%
		\fi
	\end@SpecialObj%
}%

%\newcommand{\myaxes}[6][linestyle=dashed,dash=2pt 5pt,linewidth=0.5pt]%
% #1 (optional) are the options to the command '\psaxes' and '\psline' (for steps)
% #2 is the width of the histogram
% #3 is the legend for x axis
% #4 is the height of the histogram
% #5 is the legend for y axis
% #6 is the sep on y axis
\def\myaxes{%
	\@ifnextchar[{\my@ps@axes@i}{\my@ps@axes@i[]}
}
\def\my@ps@axes@i[#1](#2,#3)#4(#5,#6){%
	\@ifnextchar[%
		{\my@ps@axes@ii[#1](#2,#3)#4(#5,#6)}%
		{%
			\fpDiv{\my@ps@subdiv}{#6}{5}%
			\fpRound{\my@ps@subdiv}{\my@ps@subdiv}{0}%
			\my@ps@axes@ii[#1](#2,#3)#4(#5,#6)[\my@ps@subdiv]%
		}%
}
\def\my@ps@axes@ii[#1](#2,#3)#4(#5,#6)[#7]#8{%
	% For legend
	\gdef\my@ps@legendminx{#2}%
	\gdef\my@ps@legendmaxx{#3}%
	\gdef\my@ps@legendminy{#5}%
	\gdef\my@ps@legendmaxy{#6}%
	\gdef\my@ps@legend{\myand{}}%
	\ifthenelse{\isempty{#1}}%
		{\psaxes[Dy=#7,labels=y,ticks=y](#2,#5)(#3,#6)}%
		{\psaxes[Dy=#7,labels=y,ticks=y,#1](#2,#5)(#3,#6)}%
	% Middle of the x-axis
	\fpDiv{\my@ps@xmiddle}{#3}{2}%
	% Size of the label
	\setlength{\my@ps@xoffset}{1ex}%
	% Label separations
	\addtolength{\my@ps@xoffset}{2\pslabelsep}%
	% Mid-size of the written text
	\addtolength{\my@ps@xoffset}{0.5ex}%
	% x-label
	\uput{\my@ps@xoffset}[-90](\my@ps@xmiddle,0){#4}%
	% Middle of the y-axis
	\fpDiv{\my@ps@ymiddle}{#6}{2}%
	% Size of the label
	\settowidth{\my@ps@yoffset}{#6}%
	% Label separations
	\addtolength{\my@ps@yoffset}{2\pslabelsep}%
	% Mid-size of the written text
	\addtolength{\my@ps@yoffset}{0.5ex}%
	% y-label
	\uput{\my@ps@yoffset}[180](0,\my@ps@ymiddle){\rotateleft{#8}}%
	\fpDiv{\temp}{#6}{#7}%
	\fpRound{\iterations}{\temp}{0}%
	\multido{\i=#7+#7}{\iterations}{%
		\ifthenelse{\isempty{#1}}%
			{\psline[linestyle=dashed,dash=2pt 5pt,linewidth=0.5pt](0,\i)(#3,\i)}%
			{\psline[linestyle=dashed,dash=2pt 5pt,linewidth=0.5pt,#1](0,\i)(#3,\i)}%
	}%
}

% To separate each element of legend
\def\myand{\hspace{\stretch{1}}\xspace}
% To define one element of the legend
\def\myleg#1#2{%
	\psframebox*[fillcolor=#2,framearc=0.25,framesep=1pt]{\textcolor{#2}{x}}
	\xspace%
	#1%
}
% Print the legend
\def\mylegend#1{%
	\uput{0pt}[45](0,\my@ps@legendmaxy){%
		\parbox{\my@ps@legendmaxx\psxunit}{%
			\centering%
			% No '%' at end of line !!! This is important to take into accound the last '\myand'
			\myand#1\myand
			\vspace{\pslabelsep}
		}%
	}%
}
% Create a barplot
\newcommand\mybarplot[2][]{%
	\ifthenelse{\isempty{#1}}%
		{\readpsbardata[header=true]{\data}{files/#2}}%
		{\readpsbardata[header=true,#1]{\data}{files/#2}}%
	\ifthenelse{\isempty{#1}}%
	{\psbarchart[chartstyle=cluster,barcolsep=0.16,barsep=0]{\data}}%
	{\psbarchart[chartstyle=cluster,barcolsep=0.16,barsep=0,#1]{\data}}%
}
% Create a boxplot
\newcommand\myboxplot[2][]{%
	\ifthenelse{\isempty{#1}}%
		{\readpsbardata[header=true]{\data}{files/#2}}%
		{\readpsbardata[header=true,#1]{\data}{files/#2}}%
	\ifthenelse{\isempty{#1}}%
	{\psbarchart[chartstyle=boxplot,barcolsep=0.16,barsep=0]{\data}}%
	{\psbarchart[chartstyle=boxplot,barcolsep=0.16,barsep=0,#1]{\data}}%
}

% End of package
\endinput
